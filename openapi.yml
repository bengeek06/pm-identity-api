openapi: 3.0.3
info:
  title: Identity Service API
  version: 0.0.1
  description: |
    Identity Service is a comprehensive identity microservice
    designed for modern distributed architectures. It provides robust user and company management features.

    Key Features:
    - Company Management: Multi-tenant architecture with company-based data isolation
    - User Management: Full user lifecycle with profile management  
    - Organizational Structure: Hierarchical organization units and position management
    - Business Relationships: Customer and subcontractor management
    - Security & RBAC: JWT cookie authentication with Guardian Service (RBAC) and Authentification Service (token management) integration
    - Health Monitoring: Comprehensive health checks and monitoring endpoints
    - Database Management: Automated migrations and initialization workflows

  contact:
      name: Identity Service Support
      email: bengeek06@gmail.com
  license:
    name: AGPL v3 / Commercial
    url: https://github.com/bengeek06/pm-identity-api/blob/identity_staging/LICENSE.md

servers:
  - url: http://localhost:5002
    description: Staging development server
  - url: http://localhost:5000
    description: Local development server
  
security:
  - JWTAuth: []

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token passed via HTTP-only cookies containing company_id and user_id. Validated by Identity Service; access control performed via Guardian Service /check-access endpoint.


  schemas:
    Customer:
      type: object
      required:
        - name
        - company_id
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier of the customer
        name:
          type: string
          maxLength: 100
          description: Name of the customer
        company_id:
          type: integer
          minimum: 1
          description: Associated company identifier (integer)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the customer
        contact_person:
          type: string
          maxLength: 100
          description: Contact person name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        address:
          type: string
          maxLength: 255
          description: Address of the customer
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date

    CustomerCreate:
      type: object
      required:
        - name
        - company_id
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the customer
        company_id:
          type: integer
          minimum: 1
          description: Associated company identifier (integer)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the customer
        contact_person:
          type: string
          maxLength: 100
          description: Contact person name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        address:
          type: string
          maxLength: 255
          description: Address of the customer

    CustomerUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the customer
        company_id:
          type: integer
          minimum: 1
          description: Associated company identifier (integer)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the customer
        contact_person:
          type: string
          maxLength: 100
          description: Contact person name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        address:
          type: string
          maxLength: 255
          description: Address of the customer
    Subcontractor:
      type: object
      required:
        - name
        - company_id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the subcontractor
        name:
          type: string
          maxLength: 100
          description: Name of the subcontractor
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the subcontractor
        contact_person:
          type: string
          maxLength: 100
          description: Optional contact person for the subcontractor
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the subcontractor
        address:
          type: string
          maxLength: 200
          description: Address of the subcontractor
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date

    SubcontractorCreate:
      type: object
      required:
        - name
        - company_id
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the subcontractor
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the subcontractor
        contact_person:
          type: string
          maxLength: 100
          description: Optional contact person for the subcontractor
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the subcontractor
        address:
          type: string
          maxLength: 200
          description: Address of the subcontractor

    SubcontractorUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the subcontractor
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the subcontractor
        contact_person:
          type: string
          maxLength: 100
          description: Optional contact person for the subcontractor
        phone_number:
          type: string
          maxLength: 50
          description: Phone number (digits only)
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the subcontractor
        address:
          type: string
          maxLength: 200
          description: Address of the subcontractor
    Position:
      type: object
      required:
        - title
        - company_id
        - organization_unit_id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the position
        title:
          type: string
          maxLength: 100
          description: Title or name of the position
        description:
          type: string
          maxLength: 200
          description: Optional description of the position
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        organization_unit_id:
          type: string
          format: uuid
          description: Associated organization unit identifier
        level:
          type: integer
          description: Level or rank of the position (must be >= 0)
          minimum: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date

    PositionCreate:
      type: object
      required:
        - title
        - organization_unit_id
      properties:
        title:
          type: string
          maxLength: 100
          description: Title or name of the position
        description:
          type: string
          maxLength: 200
          description: Optional description of the position
        organization_unit_id:
          type: string
          format: uuid
          description: Organization unit identifier the position belongs to
        level:
          type: integer
          minimum: 0
          description: Level or rank of the position (must be >= 0)

    PositionCreateInUnit:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 100
          description: Title or name of the position
        description:
          type: string
          maxLength: 200
          description: Optional description of the position
        level:
          type: integer
          minimum: 0
          description: Level or rank of the position (must be >= 0)

    PositionUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          description: Title or name of the position
        description:
          type: string
          maxLength: 200
          description: Optional description of the position
        organization_unit_id:
          type: string
          format: uuid
          description: Organization unit identifier the position belongs to
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        level:
          type: integer
          minimum: 0
          description: Level or rank of the position (must be >= 0)
    OrganizationUnit:
      type: object
      required:
        - name
        - company_id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the organization unit
        name:
          type: string
          maxLength: 100
          description: Name of the organization unit
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the organization unit
        parent_id:
          type: string
          format: uuid
          nullable: true
          description: Optional parent organization unit identifier
        path:
          type: string
          readOnly: true
          description: Hierarchical path of the organization unit
        level:
          type: integer
          readOnly: true
          description: Hierarchy level of the organization unit
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date

    OrganizationUnitCreate:
      type: object
      required:
        - name
        - company_id
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the organization unit
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the organization unit
        parent_id:
          type: string
          format: uuid
          nullable: true
          description: Optional parent organization unit identifier

    OrganizationUnitUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the organization unit
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        description:
          type: string
          maxLength: 200
          description: Optional description of the organization unit
        parent_id:
          type: string
          format: uuid
          nullable: true
          description: Optional parent organization unit identifier
    Company:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the company
        name:
          type: string
          maxLength: 100
          description: Name of the company
        description:
          type: string
          maxLength: 200
          description: Optional description of the company
        logo_url:
          type: string
          format: uri
          maxLength: 255
          description: URL to the company's logo
        website:
          type: string
          format: uri
          maxLength: 255
          description: Website URL of the company
        phone_number:
          type: string
          maxLength: 20
          description: Phone number of the company (digits only)
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address of the company
        address:
          type: string
          maxLength: 255
          description: Address of the company
        postal_code:
          type: string
          maxLength: 20
          description: Postal code of the company
        city:
          type: string
          maxLength: 100
          description: City where the company is located
        country:
          type: string
          maxLength: 100
          description: Country where the company is located
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date

    CompanyCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the company
        description:
          type: string
          maxLength: 200
          description: Optional description of the company
        logo_url:
          type: string
          format: uri
          maxLength: 255
          description: URL to the company's logo
        website:
          type: string
          format: uri
          maxLength: 255
          description: Website URL of the company
        phone_number:
          type: string
          maxLength: 20
          description: Phone number of the company (digits only)
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address of the company
        address:
          type: string
          maxLength: 255
          description: Address of the company
        postal_code:
          type: string
          maxLength: 20
          description: Postal code of the company
        city:
          type: string
          maxLength: 100
          description: City where the company is located
        country:
          type: string
          maxLength: 100
          description: Country where the company is located

    CompanyUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the company
        description:
          type: string
          maxLength: 200
          description: Optional description of the company
        logo_url:
          type: string
          format: uri
          maxLength: 255
          description: URL to the company's logo
        website:
          type: string
          format: uri
          maxLength: 255
          description: Website URL of the company
        phone_number:
          type: string
          maxLength: 20
          description: Phone number of the company (digits only)
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address of the company
        address:
          type: string
          maxLength: 255
          description: Address of the company
        postal_code:
          type: string
          maxLength: 20
          description: Postal code of the company
        city:
          type: string
          maxLength: 100
          description: City where the company is located
        country:
          type: string
          maxLength: 100
          description: Country where the company is located
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
        errors:
          type: object
          description: Detailed validation errors
          additionalProperties: true
      required:
        - message
    
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        service:
          type: string
          example: identity_service
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        environment:
          type: string
          enum: [development, testing, staging, production]
        checks:
          type: object
          properties:
            database:
              type: object
              properties:
                healthy:
                  type: boolean
                message:
                  type: string
                response_time_ms:
                  type: number
                  format: float

    VersionResponse:
      type: object
      properties:
        version:
          type: string
          example: "1.0.0"
      required:
        - version

    ConfigResponse:
      type: object
      properties:
        env:
          type: string
          enum: [development, testing, staging, production]
        debug:
          type: boolean
        database_url:
          type: string
          description: Database connection URL (sensitive info masked)

    InitDbResponse:
      type: object
      properties:
        initialized:
          type: boolean
          description: Whether the database has been initialized
        message:
          type: string

    User:
      type: object
      required:
        - email
        - hashed_password
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier of the user
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address
        hashed_password:
          type: string
          maxLength: 255
          writeOnly: true
          description: Hashed password
        first_name:
          type: string
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          maxLength: 50
          description: User's last name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number
        avatar_url:
          type: string
          format: uri
          maxLength: 255
          description: Avatar URL
        is_active:
          type: boolean
          default: true
          description: Indicates if the user account is active
        is_verified:
          type: boolean
          default: false
          description: Indicates if the email is verified
        last_login_at:
          type: string
          format: date-time
          description: Last login date
        company_id:
          type: string
          format: uuid
          description: Associated company identifier
        position_id:
          type: string
          format: uuid
          description: Associated position identifier
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Creation date
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last update date
        language:
          type: string
          enum: [en, fr]
          description: User language (en, fr)

    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address
        password:
          type: string
          description: Plain password (will be hashed automatically)
        first_name:
          type: string
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          maxLength: 50
          description: User's last name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number
        avatar_url:
          type: string
          format: uri
          maxLength: 255
          description: Avatar URL
        is_active:
          type: boolean
          default: true
          description: Indicates if the user account is active
        is_verified:
          type: boolean
          default: false
          description: Indicates if the email is verified
        position_id:
          type: string
          format: uuid
          description: Associated position identifier
        language:
          type: string
          enum: [en, fr]
          description: User language (en, fr)

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address
        password:
          type: string
          description: New plain password (will be hashed automatically)
        first_name:
          type: string
          maxLength: 50
          description: User's first name
        last_name:
          type: string
          maxLength: 50
          description: User's last name
        phone_number:
          type: string
          maxLength: 50
          description: Phone number
        avatar_url:
          type: string
          format: uri
          maxLength: 255
          description: Avatar URL
        is_active:
          type: boolean
          description: Indicates if the user account is active
        is_verified:
          type: boolean
          description: Indicates if the email is verified
        position_id:
          type: string
          format: uuid
          description: Associated position identifier
        language:
          type: string
          enum: [en, fr]
          description: User language (en, fr)

    UserRole:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user role
        user_id:
          type: string
          format: uuid
          description: User identifier
        role_id:
          type: string
          description: Role identifier (managed by Guardian Service)

    UserRoleAssignment:
      type: object
      required:
        - role_id
      properties:
        role_id:
          type: string
          description: Role identifier to assign (from Guardian Service)

    PasswordVerification:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: Password to verify


  responses:
    CustomerCreated:
      description: Customer created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'

    CustomerList:
      description: List of customers
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Customer'

    CustomerDetails:
      description: Customer details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'

    CustomerUpdated:
      description: Customer updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'

    CustomerDeleted:
      description: Customer deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Customer deleted successfully"
    PositionCreated:
      description: Position created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Position'

    PositionList:
      description: List of positions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Position'

    PositionDetails:
      description: Position details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Position'

    PositionUpdated:
      description: Position updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Position'

    PositionDeleted:
      description: Position deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Position deleted successfully"
    OrganizationUnitCreated:
      description: Organization unit created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationUnit'

    OrganizationUnitList:
      description: List of organization units
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrganizationUnit'

    OrganizationUnitDetails:
      description: Organization unit details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationUnit'

    OrganizationUnitUpdated:
      description: Organization unit updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationUnit'

    OrganizationUnitDeleted:
      description: Organization unit deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Organization unit deleted successfully"
    CompanyCreated:
      description: Company created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Company'

    CompanyList:
      description: List of companies
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Company'

    CompanyDetails:
      description: Company details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Company'

    CompanyUpdated:
      description: Company updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Company'

    CompanyDeleted:
      description: Company deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Company deleted successfully"
    Unauthorized:
      description: Missing, invalid, or expired JWT token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Missing or invalid JWT token"

    BadRequest:
      description: Invalid request data or malformed UUIDs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Invalid input data"

    NotFound:
      description: Resource not found within company context
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Resource not found"

    Conflict:
      description: Resource already exists or constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Resource already exists"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Internal server error"

    Forbidden:
      description: Valid authentication but insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "Access denied - insufficient permissions"

    SubcontractorCreated:
      description: Subcontractor created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subcontractor'

    SubcontractorList:
      description: List of subcontractors
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Subcontractor'

    SubcontractorDetails:
      description: Subcontractor details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subcontractor'

    SubcontractorUpdated:
      description: Subcontractor updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subcontractor'

    SubcontractorDeleted:
      description: Subcontractor deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Subcontractor deleted successfully"

    UserCreated:
      description: User created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserList:
      description: List of users
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

    UserDetails:
      description: User details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserUpdated:
      description: User updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserDeleted:
      description: User deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User deleted successfully"

    UserRoles:
      description: User roles list
      content:
        application/json:
          schema:
            type: object
            properties:
              roles:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'

    UserRoleCreated:
      description: Role assigned to user successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRole'

    PasswordVerificationResult:
      description: Password verification result
      content:
        application/json:
          schema:
            type: object
            properties:
              valid:
                type: boolean
                description: Indicates if the password is valid
              user:
                $ref: '#/components/schemas/User'
   
paths:
  /customers:
    get:
      tags: [Customers Management]
      summary: List all customers
      description: Returns the list of all customers
      responses:
        '200':
          $ref: '#/components/responses/CustomerList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Customers Management]
      summary: Create a new customer
      description: Creates a new customer with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          $ref: '#/components/responses/CustomerCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers/{customer_id}:
    parameters:
      - name: customer_id
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the customer

    get:
      tags: [Customers Management]
      summary: Get a customer by ID
      description: Returns details of a specific customer
      responses:
        '200':
          $ref: '#/components/responses/CustomerDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Customers Management]
      summary: Update a customer
      description: Fully updates an existing customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Customers Management]
      summary: Partially update a customer
      description: Partially updates an existing customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          $ref: '#/components/responses/CustomerUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Customers Management]
      summary: Delete a customer
      description: Deletes an existing customer
      responses:
        '204':
          $ref: '#/components/responses/CustomerDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /positions:
    get:
      tags: [Positions]
      summary: List all positions
      description: Returns the list of all positions
      responses:
        '200':
          $ref: '#/components/responses/PositionList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Positions]
      summary: Create a new position
      description: Creates a new position with the provided data; company_id is inferred from the organization unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionCreate'
      responses:
        '201':
          $ref: '#/components/responses/PositionCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /positions/{position_id}:
    parameters:
      - name: position_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the position

    get:
      tags: [Positions]
      summary: Get a position by ID
      description: Returns details of a specific position
      responses:
        '200':
          $ref: '#/components/responses/PositionDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Positions]
      summary: Update a position
      description: Fully updates an existing position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionUpdate'
      responses:
        '200':
          $ref: '#/components/responses/PositionUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Positions]
      summary: Partially update a position
      description: Partially updates an existing position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionUpdate'
      responses:
        '200':
          $ref: '#/components/responses/PositionUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Positions]
      summary: Delete a position
      description: Deletes an existing position
      responses:
        '204':
          $ref: '#/components/responses/PositionDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /organization_units/{unit_id}/positions:
    parameters:
      - name: unit_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the organization unit

    get:
      tags: [Positions]
      summary: List positions for an organization unit
      description: Returns the list of positions associated with a specific organization unit
      responses:
        '200':
          $ref: '#/components/responses/PositionList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Positions]
      summary: Create a position for an organization unit
      description: Creates a new position within the specified organization unit; company_id is inferred from the unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionCreateInUnit'
      responses:
        '201':
          $ref: '#/components/responses/PositionCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organization_units:
    get:
      tags: [Organizations]
      summary: List all organization units
      description: Returns the list of all organization units
      responses:
        '200':
          $ref: '#/components/responses/OrganizationUnitList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Organizations]
      summary: Create a new organization unit
      description: Creates a new organization unit with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUnitCreate'
      responses:
        '201':
          $ref: '#/components/responses/OrganizationUnitCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /organization_units/{unit_id}:
    parameters:
      - name: unit_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the organization unit

    get:
      tags: [Organizations]
      summary: Get an organization unit by ID
      description: Returns details of a specific organization unit
      responses:
        '200':
          $ref: '#/components/responses/OrganizationUnitDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Organizations]
      summary: Update an organization unit
      description: Fully updates an existing organization unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUnitUpdate'
      responses:
        '200':
          $ref: '#/components/responses/OrganizationUnitUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Organizations]
      summary: Partially update an organization unit
      description: Partially updates an existing organization unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUnitUpdate'
      responses:
        '200':
          $ref: '#/components/responses/OrganizationUnitUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Organizations]
      summary: Delete an organization unit
      description: Deletes an existing organization unit
      responses:
        '204':
          $ref: '#/components/responses/OrganizationUnitDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /organization_units/{unit_id}/children:
    parameters:
      - name: unit_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the organization unit

    get:
      tags: [Organizations]
      summary: List children of an organization unit
      description: Returns the list of child organization units for the given parent organization unit
      responses:
        '200':
          $ref: '#/components/responses/OrganizationUnitList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /companies:
    get:
      tags: [Companies]
      summary: List all companies
      description: Returns the list of all companies
      responses:
        '200':
          $ref: '#/components/responses/CompanyList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Companies]
      summary: Create a new company
      description: Creates a new company with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
      responses:
        '201':
          $ref: '#/components/responses/CompanyCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /companies/{company_id}:
    parameters:
      - name: company_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the company

    get:
      tags: [Companies]
      summary: Get a company by ID
      description: Returns details of a specific company
      responses:
        '200':
          $ref: '#/components/responses/CompanyDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Companies]
      summary: Update a company
      description: Fully updates an existing company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdate'
      responses:
        '200':
          $ref: '#/components/responses/CompanyUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Companies]
      summary: Partially update a company
      description: Partially updates an existing company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdate'
      responses:
        '200':
          $ref: '#/components/responses/CompanyUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Companies]
      summary: Delete a company
      description: Deletes an existing company
      responses:
        '204':
          $ref: '#/components/responses/CompanyDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /health:
    get:
      tags: [System]
      summary: Health check endpoint
      description: Returns comprehensive health information including database connectivity
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /version:
    get:
      tags: [System]
      summary: Get API version
      description: Returns the current version of the identity Service API
      responses:
        '200':
          description: API version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /config:
    get:
      tags: [System]
      summary: Get application configuration
      description: Returns current application configuration (non-sensitive data only)
      responses:
        '200':
          description: Application configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /init-db:
    get:
      tags: [System]
      summary: Check database initialization status
      description: Returns whether the identity Service has been initialized
      security: []
      responses:
        '200':
          description: Initialization status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitDbResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [System]
      summary: Initialize database with default permissions
      description: Initialize the database with default permissions if not already done
      security: []
      responses:
        '200':
          description: Database initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitDbResponse'
        '409':
          description: Database already initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags: [Users]
      summary: List all users
      description: Returns the list of all users for the authenticated company
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Users]
      summary: Create a new user
      description: Creates a new user with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          $ref: '#/components/responses/UserCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the user

    get:
      tags: [Users]
      summary: Get a user by ID
      description: Returns details of a specific user
      responses:
        '200':
          $ref: '#/components/responses/UserDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Users]
      summary: Update a user
      description: Fully updates an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/UserUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Users]
      summary: Partially update a user
      description: Partially updates an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/UserUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Users]
      summary: Delete a user
      description: Deletes an existing user
      responses:
        '204':
          $ref: '#/components/responses/UserDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/roles:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the user

    get:
      tags: [Users]
      summary: Get user roles
      description: Returns the list of roles assigned to a user via the Guardian Service (RBAC)
      responses:
        '200':
          $ref: '#/components/responses/UserRoles'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Users]
      summary: Assign a role to a user
      description: Assigns a new role to a user via the Guardian Service (RBAC)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleAssignment'
      responses:
        '201':
          $ref: '#/components/responses/UserRoleCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/roles/{user_role_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the user
      - name: user_role_id
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the user role

    get:
      tags: [Users]
      summary: Get a specific user role
      description: Returns details of a role assigned to a user
      responses:
        '200':
          description: User role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Users]
      summary: Remove a role from a user
      description: Removes a specific role from a user via the Guardian Service (RBAC)
      responses:
        '204':
          description: Role removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /positions/{position_id}/users:
    parameters:
      - name: position_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the position

    get:
      tags: [Users]
      summary: Get users for a position
      description: Returns the list of users associated with a specific position
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /subcontractors:
    get:
      tags: [Subcontractors Management]
      summary: List all subcontractors
      description: Returns the list of all subcontractors
      responses:
        '200':
          $ref: '#/components/responses/SubcontractorList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Subcontractors Management]
      summary: Create a new subcontractor
      description: Creates a new subcontractor with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorCreate'
      responses:
        '201':
          $ref: '#/components/responses/SubcontractorCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /subcontractors/{subcontractor_id}:
    parameters:
      - name: subcontractor_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Unique identifier of the subcontractor

    get:
      tags: [Subcontractors Management]
      summary: Get a subcontractor by ID
      description: Returns details of a specific subcontractor
      responses:
        '200':
          $ref: '#/components/responses/SubcontractorDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Subcontractors Management]
      summary: Update a subcontractor
      description: Fully updates an existing subcontractor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorUpdate'
      responses:
        '200':
          $ref: '#/components/responses/SubcontractorUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags: [Subcontractors Management]
      summary: Partially update a subcontractor
      description: Partially updates an existing subcontractor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorUpdate'
      responses:
        '200':
          $ref: '#/components/responses/SubcontractorUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Subcontractors Management]
      summary: Delete a subcontractor
      description: Deletes an existing subcontractor
      responses:
        '204':
          $ref: '#/components/responses/SubcontractorDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /verify_password:
    post:
      tags: [Authentification]
      summary: Verify password
      description: Verifies if the provided password matches the user's password. Used by Authentification Service to create tokens.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordVerification'
      responses:
        '200':
          $ref: '#/components/responses/PasswordVerificationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "User or password invalid"
        '500':
          $ref: '#/components/responses/InternalServerError'

tags:
- name: System
  description: System health, version, and configuration endpoints
- name: Users
  description: User management operations
- name: Authentification
  description: Password verification endpoint used by Authentification Service for token creation
- name: Companies
  description: Company management operations
- name: Organizations
  description: Organization management operations
- name: Positions
  description: Position management operations
- name: Customers Management
  description: Customer management operations
- name: Subcontractors Management
  description: Subcontractor management operations
